import os
import time

from dotenv import load_dotenv
import redis
from telegram import KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (CommandHandler, ConversationHandler, Filters,
                          MessageHandler, Updater)

from quiz_utils import (WELCOME_MESSAGE, States, check_answer, clean_answer,
                        get_current_question, get_random_question,
                        get_redis_keys, get_user_score, get_user_state,
                        increment_user_score, load_all_questions,
                        save_question_to_redis, set_user_state)


def create_keyboard():
    keyboard = [
        [KeyboardButton("üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üè≥Ô∏è –°–¥–∞—Ç—å—Å—è")],
        [KeyboardButton("üìä –ú–æ–π —Å—á–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_user_context(update, context):
    user_id = update.effective_user.id
    redis_client = context.bot_data['redis_client']
    keys = get_redis_keys(user_id)
    questions_dict = context.bot_data['questions_dict']
    
    return user_id, redis_client, keys, questions_dict


def smart_entry_handler(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    current_state = get_user_state(redis_client, keys['state'])
    
    if current_state == States.ANSWERING:
        question_data = get_current_question(redis_client, keys['question'])
        if question_data:
            reply_markup = create_keyboard()
            update.message.reply_text(
                f"üîÑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n‚ùì {question_data['question']}", 
                reply_markup=reply_markup
            )
            return States.ANSWERING
    
    reply_markup = create_keyboard()
    update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)
    set_user_state(redis_client, keys['state'], States.CHOOSING)
    return States.CHOOSING


def handle_new_question_request(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    question, answer = get_random_question(questions_dict)
    save_question_to_redis(redis_client, keys['question'], question, answer)
    update.message.reply_text(f"‚ùì {question}")
    set_user_state(redis_client, keys['state'], States.ANSWERING)
    return States.ANSWERING


def handle_solution_attempt(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    question_data = get_current_question(redis_client, keys['question'])
    correct_answer = question_data['answer']
    user_answer = update.message.text
    
    is_correct = check_answer(user_answer, correct_answer)
    
    if is_correct:
        current_score = get_user_score(redis_client, keys['score'])
        increment_user_score(redis_client, keys['score'], current_score)
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª")
        redis_client.delete(keys['question'])
        set_user_state(redis_client, keys['state'], States.CHOOSING)
        return States.CHOOSING
    else:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚Ä¶ –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑?")
        return States.ANSWERING


def handle_give_up(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    question_data = get_current_question(redis_client, keys['question'])
    answer = question_data['answer']
    
    clean_answer_text = clean_answer(answer)
    update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {clean_answer_text}")
    
    question, answer = get_random_question(questions_dict)
    save_question_to_redis(redis_client, keys['question'], question, answer)
    update.message.reply_text(f"‚ùì {question}")
    set_user_state(redis_client, keys['state'], States.ANSWERING)
    return States.ANSWERING


def handle_score(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    current_score = get_user_score(redis_client, keys['score'])
    update.message.reply_text(f"üìä –í–∞—à —Å—á–µ—Ç: {current_score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    
    current_state = get_user_state(redis_client, keys['state'])
    return current_state


def handle_fallback(update, context):
    user_id, redis_client, keys, questions_dict = get_user_context(update, context)
    
    current_state = get_user_state(redis_client, keys['state'])
    
    if current_state == States.ANSWERING:
        question_data = get_current_question(redis_client, keys['question'])
        if question_data:
            reply_markup = create_keyboard()
            update.message.reply_text(
                f"‚ùì {question_data['question']}\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º", 
                reply_markup=reply_markup
            )
            return States.ANSWERING
    
    reply_markup = create_keyboard()
    update.message.reply_text(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
        reply_markup=reply_markup
    )
    set_user_state(redis_client, keys['state'], States.CHOOSING)
    return States.CHOOSING


def main():
    load_dotenv()
    bot_token = os.environ["TG_BOT_TOKEN"]
    redis_url = os.environ["REDIS_URL"]
    quiz_data_path = os.environ["QUIZ_DATA_PATH"]
    
    redis_client = redis.from_url(redis_url, decode_responses=True)
    questions_dict = load_all_questions(quiz_data_path)
    
    updater = Updater(token=bot_token)
    dispatcher = updater.dispatcher
    
    dispatcher.bot_data['redis_client'] = redis_client
    dispatcher.bot_data['questions_dict'] = questions_dict
    
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", smart_entry_handler),
            MessageHandler(Filters.all, smart_entry_handler)
        ],
        states={
            States.CHOOSING: [
                MessageHandler(Filters.regex("^üÜï –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å$"), handle_new_question_request),
                MessageHandler(Filters.regex("^üìä –ú–æ–π —Å—á–µ—Ç$"), handle_score),
            ],
            States.ANSWERING: [
                MessageHandler(Filters.regex("^üè≥Ô∏è –°–¥–∞—Ç—å—Å—è$"), handle_give_up),
                MessageHandler(Filters.regex("^üìä –ú–æ–π —Å—á–µ—Ç$"), handle_score),
                MessageHandler(Filters.text & ~Filters.command, handle_solution_attempt),
            ],
        },
        fallbacks=[
            CommandHandler("start", smart_entry_handler),
            MessageHandler(Filters.all, handle_fallback)
        ]
    )
    
    dispatcher.add_handler(conversation_handler)
    
    while True:
        try:
            updater.start_polling()
            updater.idle()
        except Exception as e:
            time.sleep(5)


if __name__ == "__main__":
    main() 